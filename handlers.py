from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.utils.markdown import hbold

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


from database import add_user, get_user_count, show_movie, add_movie, delete_movie, get_liked_movies, add_liked_movie, remove_liked_movie, sendPostPeople
import config
import asyncio

bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class SearchState(StatesGroup):
    searched = State()

@dp.message(CommandStart())
async def start_cmd(message: Message):

    add_user(message.from_user.id, message.from_user.username, message.from_user.first_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
        InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ãüîç", callback_data="searchFilms"), 
        InlineKeyboardButton(text="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è‚ù§Ô∏è", callback_data='show_movies')
        ]
    ])

    await message.answer("""üçø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ò–ù–û-–ë–û–¢–ò–©–ï!\n\n–¢—É—Ç –Ω–µ –±–æ–ª—Ç–∞—é—Ç ‚Äî —Ç—É—Ç –∏—â—É—Ç —Ñ–∏–ª—å–º—ã –ø–æ –∫–æ–¥–∞–º üéØ\n\nüîç –£–≤–∏–¥–µ–ª –≤ TikTok –∫–æ–¥ —Ç–∏–ø–∞ 4382?\n–ö–∏–¥–∞–π –µ–≥–æ —Å—é–¥–∞ ‚Äî –∏ –º–∞–≥–∏—è —Å–ª—É—á–∏—Ç—Å—è ‚ú®\n\nüì¶ –Ø –¥–∞–º —Ç–µ–±–µ:\n‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ üé¨\n‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤, —è –∂ –Ω–µ —á—É–¥–æ–≤–∏—â–µ) üòå\n‚Äî –ö–∞—Ä—Ç–∏–Ω–∫—É, —á—Ç–æ–± —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ ¬´–ó–µ–ª—ë–Ω—ã–π —Å–ª–æ–Ω–∏–∫¬ª üò≥\n\n‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ñ–º–∏ —Å–µ—Ä–¥–µ—á–∫–æ ‚Äî –∏ —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.\n\n–í–ø–µ—Ä—ë–¥, –ø–æ–∫–∞ –ø–æ–ø–∫–æ—Ä–Ω –Ω–µ –æ—Å—Ç—ã–ª! üçøüî•""",
            parse_mode="HTML",
            reply_markup=keyboard
    )

@dp.message(Command("menu"))
async def menu_cmd(message: Message):
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ãüîç", callback_data="searchFilms"), 
                InlineKeyboardButton(text="–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è‚ù§Ô∏è", callback_data='show_movies')
            ],
            [
                InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="support")
            ]
        ])

    await message.answer("""üé¨ –¢–æ—Ç —Å–∞–º—ã–π –±–æ—Ç –∏–∑ TikTok\n\nüëÄ –£–≤–∏–¥–µ–ª –∫–æ–¥ –ø–æ–¥ –≤–∏–¥–µ–æ –∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –∑–∞ —Ñ–∏–ª—å–º?\nüì• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å—é–¥–∞ ‚Äî —è –Ω–∞–π–¥—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π.""",
        parse_mode="HTML",
        reply_markup=keyboard
        )
    
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery):
    user_id = callback.from_user.id

    if await config.check_all_subscriptions(bot, user_id):
        await callback.message.delete()
        await start_cmd(callback.message)
    else:
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)

@dp.callback_query(F.data == "searchFilms")
async def searchFilms(callback: CallbackQuery, state: FSMContext):

    userId = callback.from_user.id
    chatId = callback.message.chat.id

    if not await config.check_all_subscriptions(bot, userId):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
            [InlineKeyboardButton(text=f"–ö–∞–Ω–∞–ª {i}", url=item)]
            for i, item in enumerate(config.channels, start=1)
        ] + [[InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data='check_subscription')]]
        )

        await bot.send_photo(
            chatId,
            photo="https://imgur.com/QRjNKW2",
            caption="–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤! –í–µ–¥—å —Ö–æ—Ä–æ—à–∏–µ —Ñ–∏–ª—å–º—ã ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥, –Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç —Ç–µ—Ö, –∫—Ç–æ –Ω–∞—Å –ª—é–±–∏—Ç üòâ",
            reply_markup=keyboard
        )
    else:

        await state.set_state(SearchState.searched)
        await callback.message.delete()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚Ü©Ô∏è ", callback_data="backToMenu")]
        ])

        await callback.message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–•–•–•–•)‚¨áÔ∏è", reply_markup=keyboard)

@dp.message(SearchState.searched)
async def search_code(message: Message, state: FSMContext):
    code = message.text.strip()
    user_id = message.from_user.id
    chat_id = message.chat.id

    if not code.isdigit():
        await message.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä! üî¢")
        return
    
    result = show_movie(int(code))

    if result:
        try:
            title, description, image_url = result

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{code}"),
                    InlineKeyboardButton(text="üíî", callback_data=f"dislike_{code}")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
                ]
            ])

            await bot.send_photo(
                chat_id,
                image_url,
                caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {hbold(title)}, \n ------ \n{hbold(description)}",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    else:
        await message.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(F.data == "show_movies")
async def liked_cmd(callback: CallbackQuery):

    user_id = callback.from_user.id
    liked_movies = get_liked_movies(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —Ñ–∏–ª—å–º–æ–≤

    await callback.message.delete()

    if not liked_movies:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚Ü©Ô∏è ", callback_data="backToMenu")]
        ])
        await callback.message.answer("–¢—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª(–∞) üé¨üí§", reply_markup=keyboard)
    else:
        print(f"User {user_id} liked movies: {liked_movies}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∏–ª—å–º–æ–≤
        lines = []
        for code in liked_movies:
            result = show_movie(code)
            if result:
                title, _, _ = result
                lines.append(f"{title} ‚Äî {code}")

        text = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ üé¨:\n\n" + "\n".join(lines)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚Ü©Ô∏è ", callback_data="backToMenu")]
        ])

        await bot.send_message(callback.from_user.id, text, reply_markup=keyboard)

@dp.callback_query(F.data == "backToMenu")
async def backToMenu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()

    await menu_cmd(callback.message)

@dp.callback_query(F.data == "back")
async def back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()

    await menu_cmd(callback.message)

@dp.callback_query(F.data.startswith('like_'))
async def like_movie(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –∏–∑ callback_data
    code = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    liked_movies = get_liked_movies(user_id)
    if code not in liked_movies:
        add_liked_movie(user_id, code)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è
        await callback_query.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è!")
    else:
        await callback_query.answer("–≠—Ç–æ—Ç —Ñ–∏–ª—å–º —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è.", show_alert=True)

@dp.callback_query(F.data.startswith('dislike_'))
async def dislike_movie(callback_query: CallbackQuery):
    code = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id

    liked_movies = get_liked_movies(user_id)
    if code in liked_movies:
        remove_liked_movie(user_id, code)
        await callback_query.answer("–§–∏–ª—å–º —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è!")
    else:
        await callback_query.answer("–≠—Ç–æ—Ç —Ñ–∏–ª—å–º –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è.", show_alert=True)


async def send_post_cmd(sources, image_url, text, ids):
    success_count = 0
    error_count = 0

    if image_url == "-":

        for user_id in ids:
            try:

                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏‚¨ÜÔ∏è", url=sources)]
                ])

                await bot.send_message(
                    user_id,
                    text=f"{text}",
                    reply_markup=kb
                )
                success_count += 1
                await asyncio.sleep(0.1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ñ–ª—É–¥—É
            except Exception as e:
                error_count += 1
                print(f"–û—à–∏–±–∫–∞: {user_id}: {e}")

        print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}\n, –û—à–∏–±–æ–∫: {error_count}")

    else:

        for user_id in ids:
            try:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏‚¨ÜÔ∏è", url=sources)]
                ])

                await bot.send_photo(
                    user_id,
                    image_url,
                    caption=f"{text}",
                    reply_markup=kb
                )
                success_count += 1
                await asyncio.sleep(0.1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ñ–ª—É–¥—É
            except Exception as e:
                error_count += 1
                print(f"–û—à–∏–±–∫–∞: {user_id}: {e}")

        print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}\n, –û—à–∏–±–æ–∫: {error_count}")

async def process_post(text, image_url, sources):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª—ã
    ids = sendPostPeople()
    print(ids)
    await send_post_cmd(sources, image_url, text, ids)

async def main():
    await dp.start_polling(bot, skip_updates=True)
